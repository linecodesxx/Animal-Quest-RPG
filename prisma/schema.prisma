// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Class {
  WARRIOR
  MAGE
  ARCHER
  HUNTER
}

enum WeaponType {
  SWORD
  AXE
  BOW
  MAGIC_WAND
  DAGGER
}

enum ArmorType {
  LIGHT
  MEDIUM
  HEAVY
  MAGICAL
}


enum ItemType {
  EMPTY
  FOOD
  POTION
  SWORD
  ARMOR
  MAGIC_SCROLL
  TREASURE
  TOOL
  ACCESSORY
}

// User (Пользователь)
model User {
  id          Int        @id @default(autoincrement())
  telegramId  String?     @unique
  username    String?     @unique
  createdAt   DateTime   @default(now())
  characters  Character[]
  battles     Battle[]   @relation("UserBattles")
  role        Role       @default(USER)
  notifyOnAnimalSpawn Boolean @default(true)
}

model Character {
  id         Int           @id @default(autoincrement())
  name       String
  class      Class?
  level      Int           @default(1)
  exp        Int           @default(0)
  health     Int           @default(100)
  maxHealth  Int           @default(100)
  hungry     Int           @default(10)
  maxHungry  Int           @default(10)
  rep        Int           @default(0)
  cash       Int           @default(0)
  user       User          @relation(fields: [userId], references: [id])
  userId     Int
  armor      ArmorType?          
  weapon     WeaponType?
  inventory  InventoryItem[]
  quests     QuestProgress[]
  battles    Battle[]      @relation("CharacterBattles")
  createdAt  DateTime      @default(now())

  AnimalSpawn AnimalSpawn[]

  CharacterClass CharacterClass[]
}

model CharacterClass {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  attackMod Float   @default(1.0) // множитель урона
  defenseMod Float  @default(1.0)
  skills    String? // описание пассивок или спецумений

  characters Character[]

  Weapon Weapon[]

  Armor Armor[]
}

model Weapon {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  attack    Int
  classReq  CharacterClass? @relation(fields: [classReqId], references: [id])
  classReqId Int?
  type       WeaponType?
  buffs     Buff[]   @relation("WeaponBuffs")
  rarity    String?
  cuteFactor Int?

  InventoryItem InventoryItem[]
}

model Armor {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  defense   Int
  classReq  CharacterClass? @relation(fields: [classReqId], references: [id])
  classReqId Int?
  type       ArmorType?
  buffs     Buff[]   @relation("ArmorBuffs")
  rarity    String?
  cuteFactor Int?

  InventoryItem InventoryItem[]
}

enum BuffType {
  ATTACK_UP
  DEFENSE_UP
  HEALTH_REGEN
  SPEED_UP
  HUNGER_REDUCE
  CRIT_CHANCE
  CUTENESS_BOOST
  FIRE_RESISTANCE
  MAGIC_POWER
}

model Buff {
  id        Int      @id @default(autoincrement())
  type      BuffType
  value     Int
  duration  Int?     // ходы/секунды, если временно
  description String?

  weapons   Weapon[] @relation("WeaponBuffs")
  armors    Armor[]  @relation("ArmorBuffs")

  Food Food[] @relation("FoodBuffs")
}

model Quest {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  rewardExp   Int
  rewardItem  String?
  createdAt   DateTime         @default(now())
  progresses  QuestProgress[]
}

model QuestProgress {
  id          Int        @id @default(autoincrement())
  character   Character  @relation(fields: [characterId], references: [id])
  characterId Int
  quest       Quest      @relation(fields: [questId], references: [id])
  questId     Int
  status      QuestStatus
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())
}

enum QuestStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model InventoryItem {
  id           Int         @id @default(autoincrement())
  quantity     Int         @default(1)
  type         ItemType    @default(EMPTY)
  class        Class?
  character    Character   @relation(fields: [characterId], references: [id])
  characterId  Int

  // связи с конкретными предметами
  weapon       Weapon?     @relation(fields: [weaponId], references: [id])
  weaponId     Int?

  armor        Armor?      @relation(fields: [armorId], references: [id])
  armorId      Int?

  food         Food?       @relation(fields: [foodId], references: [id])
  foodId       Int?

  // резервное имя — только если предмет не связан напрямую
  name         String?
}


model Food {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  healValue   Int      @default(0)
  hungryValue Int      @default(0)
  buffs       Buff[]   @relation("FoodBuffs")

  InventoryItem InventoryItem[]
}


model Battle {
  id             Int        @id @default(autoincrement())
  character      Character  @relation("CharacterBattles", fields: [characterId], references: [id])
  characterId    Int
  user           User       @relation("UserBattles", fields: [userId], references: [id])
  userId         Int
  enemy          String
  result         BattleResult
  createdAt      DateTime   @default(now())
}

enum BattleResult {
  WIN
  LOSE
  ESCAPED
}

model Animal {
  id        Int       @id @default(autoincrement())
  type      String    @unique
  rarity    String
  spawns    AnimalSpawn[]
  createdAt DateTime  @default(now())
}

model AnimalSpawn {
  id          Int       @id @default(autoincrement())
  animal      Animal    @relation(fields: [animalId], references: [id])
  animalId    Int
  spawnedAt   DateTime  @default(now())
  despawnAt   DateTime
  isCaught    Boolean   @default(false)
  caughtBy    Character? @relation(fields: [caughtById], references: [id])
  caughtById  Int?
}
