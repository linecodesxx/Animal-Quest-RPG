import { UserService } from './../user/user.service';
import { Command, Ctx, On, Start, Update } from 'nestjs-telegraf';
import { BotService } from './bot.service';
import { Context } from 'telegraf';
import { AnimalSpawnService } from 'src/animal-spawn.service/animal-spawn.service';
import { InventoryService } from 'src/inventory/inventory.service';
import { AdminGuard } from 'src/common/guards/admin.guard';
import { NotImplementedException, UseGuards } from '@nestjs/common';
import { BuffType, ItemType } from 'generated/prisma';
import { BotHandlers } from './handlers/bot.handlers';
import { CharacterService } from 'src/character/character.service';
import { PrismaService } from 'src/prisma/prisma.service';
import { parseBuffs } from 'src/common/utils/parser';
import { parseArgs } from '../common/utils/parser';
import { FoodService } from 'src/food.service/food.service';
import { WeaponService } from 'src/weapon.service/weapon.service';
import { ArmorService } from 'src/armor.service/armor.service';
import { BuffService } from 'src/buff.service/buff.service';

/**
 * –°–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
 * –±–µ–∑ –∫–æ–º–º–∞–Ω–¥ —á–µ—Ä–µ–∑ / (—Å—Ç—Ä–æ–∫–∞ 271)
 *
 * –°–¥–µ–ª–∞—Ç—å —Å–±–æ—Ä –∂–∏–≤–æ—Ç–Ω—ã—Ö —á—Ç–æ–±—ã –æ–Ω –ø—Ä–∏–Ω–æ—Å–∏–ª –æ–ø—ã—Ç
 *
 * –°–¥–µ–ª–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (/bonus –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)
 *
 * –°–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–∏–¥–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏ —Ä–µ–ø–ª–∞–µ –Ω–∞ –Ω–∏—Ö
 *
 * –°–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–¥–∞–≤—Ç–∞—Ç—å –≤ –ø—Ä–∏—é—Ç
 *
 * –î–æ–±–∞–≤–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫—É: —Ä—ã–Ω–æ–∫, –≤–∞–ª—é—Ç—É, –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞, –∫—É–ª–¥–∞—É–Ω—ã –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π
 *
 * –°–¥–µ–ª–∞—Ç—å –∫–≤–µ—Å—Ç—ã
 *
 * –î–æ–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è use/drop –∏ —Ç–¥
 */

@Update()
export class BotUpdate {
  constructor(
    private botService: BotService,
    private animalSpawnService: AnimalSpawnService,
    private userService: UserService,
    private inventoryService: InventoryService,
    private botHandlers: BotHandlers,
    private characterService: CharacterService,
    private foodService: FoodService,
    private weaponService: WeaponService,
    private armorService: ArmorService,
    private buffService: BuffService,
    private prisma: PrismaService,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context) {
    const user = await this.botService.findOrCreateUser(ctx);
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${user?.username || '–ü—É—à–∏—Å—Ç–∏–∫'}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RPG! üêæ\n` +
        '–ò—Å–ø–æ–ª—å–∑—É–π /find_pet —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –ª–æ–≤–ª–∏! \n' +
        '–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–ø–∞–≤–Ω–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö - /unsubscribe',
    );
  }

  @Command('me')
  async meInfo(@Ctx() ctx: Context) {
    if (!ctx.from) return;
    const telegramId = String(ctx.from.id);
    const character =
      await this.userService.getUserCharacterByTelegramId(telegramId);

    if (!character) {
      await ctx.reply(
        '–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–π–º–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ —á–µ—Ä–µ–∑ /find_pet!',
      );
      return;
    }
    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ quantity
    const totalItems = character.inventory.reduce(
      (sum, item) => sum + (item.quantity ?? 0),
      0,
    );
    // üßç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂:${animal.type}
    const msg = `üßç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂: 
üë§ –ò–º—è: ${character.name}
üìà –£—Ä–æ–≤–µ–Ω—å: ${character.level} (0/10 ~> ${character.level + 1}) 
üå† –ö–ª–∞—Å—Å: ${character.class}
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${character.health}/${character.maxHealth}
üçó –ì–æ–ª–æ–¥: ${character.hungry}/${character.maxHungry}
üí∞ –ú–æ–Ω–µ—Ç—ã: ${character.cash}
ü´° –†–µ–ø—É—Ç–∞—Ü–∏—è: ${character.rep}
üó∫Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã: {quests.done}
üéí –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${totalItems}
  `;

    await ctx.reply(msg, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–ë—Ä–æ–Ω—è', callback_data: `armor:${character.id}` },
            { text: '–û—Ä—É–∂–∏–µ', callback_data: `swords:${character.id}` },
          ],
          [
            { text: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', callback_data: `acsessoirs:${character.id}` },
            { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: `settings:${character.id}` },
          ],
          [{ text: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data: `inventory:${character.id}` }],
        ],
      },
    });
  }

  @Command('find_pet')
  async findAnimals(@Ctx() ctx: Context) {
    const spawns = await this.animalSpawnService.getActiveSpawns();

    if (spawns.length === 0) {
      await ctx.reply('–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!');
      return;
    }

    for (const spawn of spawns) {
      await ctx.reply(
        `üêæ –ù–∞–π–¥–µ–Ω–æ: ${spawn.animal.type}\n` +
          `üïí –ò—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑: ${Math.round((spawn.despawnAt.getTime() - Date.now()) / 60000)} –º–∏–Ω\n` +
          `üéØ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–π–º–∞—Ç—å!`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `–ü–æ–π–º–∞—Ç—å ${spawn.animal.type}!`,
                  callback_data: `catch_${spawn.id}`,
                },
              ],
            ],
          },
        },
      );
    }
  }

  @Command('unsubscribe')
  async unsubscribe(@Ctx() ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    await this.userService.updateByTelegramId(telegramId, {
      notifyOnAnimalSpawn: false,
    });

    await ctx.reply(
      '–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö üêæ \n ' +
        '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ - /subscribe',
    );
  }

  @Command('subscribe')
  async subscribe(@Ctx() ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    await this.userService.updateByTelegramId(telegramId, {
      notifyOnAnimalSpawn: true,
    });

    await ctx.reply(
      '–¢—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö üêæ \n' +
        '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è - /usubscribe',
    );
  }

  @Command('inventory')
  async getInv(@Ctx() ctx: Context) {
    if (!ctx.from) return;
    const telegramId = String(ctx.from.id);
    const character =
      await this.userService.getUserCharacterByTelegramId(telegramId);

    if (!character) {
      await ctx.reply(
        '–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–π–º–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ —á–µ—Ä–µ–∑ /find_pet!',
      );
      return;
    }

    const items = await this.inventoryService.getInventory(character.id);

    const formatted = items
      .map((item, index) => `${index + 1}. ${item.name} √ó${item.quantity}`)
      .join('\n');

    const keyboard = items.map((item) => [
      {
        text: `${item.name} x${item.quantity}`,
        callback_data: `item:${item.id}`,
      },
    ]);
    if (formatted.length === 0) {
      await ctx.reply('üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç...', {
        reply_markup: {
          inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'me:back' }]],
        },
      });
    } else {
      await ctx.reply(`üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n${formatted}`, {
        reply_markup: {
          inline_keyboard: [
            ...keyboard,
            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'me:back' }],
          ],
        },
      });
    }
  }

  @Command('settings')
  async settings() {
    throw new NotImplementedException('NotImplemeted');
  }

  @UseGuards(AdminGuard)
  @Command('news')
  async news(@Ctx() ctx: Context) {
    const message = ctx.message;
    if (!message || !('text' in message)) return;

    const fullText = message.text.trim(); // "/news –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
    const announcement = fullText.slice(6).trim(); // –æ—Ç—Ä–µ–∑–∞–µ–º "/news" (5 —Å–∏–º–≤–æ–ª–æ–≤ + –ø—Ä–æ–±–µ–ª)

    if (!announcement) {
      await ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/news –°–µ–≥–æ–¥–Ω—è –≤ 18:00 –±—É–¥–µ—Ç –∏–≤–µ–Ω—Ç!',
      );
      return;
    }

    // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–ª—å—à–µ
    await ctx.reply(`üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    await this.botService.sendMessageToUsers(`üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n${announcement}`);
  }

  @UseGuards(AdminGuard)
  @Command('give')
  async giveItem(@Ctx() ctx: Context) {
    const message = ctx.message;
    if (!message || !('text' in message)) return;

    const args = message.text.split(' ').slice(1); // ['FOOD', 'apple', '@username']
    const [userTypeRaw, itemName, usernameArg] = args;

    const validItemTypes = Object.values(ItemType);
    if (!validItemTypes.includes(userTypeRaw as ItemType)) {
      await ctx.reply(
        `–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: ${validItemTypes.join(', ')}`,
      );
      return;
    }
    const itemType = userTypeRaw as ItemType;

    if (!itemName || !usernameArg) {
      await ctx.reply(
        '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /give <ItemType> <itemName> @username',
      );
      return;
    }

    const username = usernameArg.startsWith('@')
      ? usernameArg.slice(1)
      : usernameArg;
    const targetUser = await this.userService.getUserByUsername(username);
    if (!targetUser) {
      await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return;
    }
    if (!targetUser.telegramId) {
      await ctx.reply(`‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} –Ω–µ –∑–∞–¥–∞–Ω Telegram ID.`);
      return;
    }
    const targetCharacter = await this.userService.getUserCharacterByTelegramId(
      targetUser.telegramId,
    );
    if (!targetCharacter) {
      await ctx.reply(`‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`);
      return;
    }

    // –ù–∞–π–¥—ë–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let weaponId: number | undefined = undefined;
    let armorId: number | undefined = undefined;
    let foodId: number | undefined = undefined;

    if (itemType === ItemType.SWORD) {
      const weapon = await this.prisma.weapon.findFirst({
        where: { name: itemName },
      });
      if (!weapon) {
        await ctx.reply(`‚ùå –ú–µ—á "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.`);
        return;
      }
      weaponId = weapon.id;
    } else if (itemType === ItemType.ARMOR) {
      const armor = await this.prisma.armor.findFirst({
        where: { name: itemName },
      });
      if (!armor) {
        await ctx.reply(`‚ùå –ë—Ä–æ–Ω—è "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.`);
        return;
      }
      armorId = armor.id;
    } else if (itemType === ItemType.FOOD) {
      const food = await this.prisma.food.findFirst({
        where: { name: itemName },
      });
      if (!food) {
        await ctx.reply(`‚ùå –ï–¥–∞ "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.`);
        return;
      }
      foodId = food.id;
    }

    // –°–æ–∑–¥–∞—ë–º InventoryItem —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∏–º–µ–Ω–µ–º
    await this.prisma.inventoryItem.create({
      data: {
        characterId: targetCharacter.id,
        quantity: 1,
        type: itemType,
        weaponId,
        armorId,
        foodId,
        name: !weaponId && !armorId && !foodId ? itemName : null,
      },
    });

    await ctx.reply(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç "${itemName}" –≤—ã–¥–∞–Ω @${username}.`);
    await this.botService.sendMessageToTelegramId(
      targetUser.telegramId,
      `üéÅ –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: ${itemName}!`,
    );
  }

  @UseGuards(AdminGuard)
  @Command('clear_inventory')
  async clearInventory(@Ctx() ctx: Context) {
    const message = ctx.message;
    if (!message || !('text' in message)) return;

    const args = message.text.split(' ').slice(1); // ['/clear_inventory', '@username']
    const usernameArg = args[0];

    if (!usernameArg) {
      await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /clear_inventory @username');
      return;
    }

    const username = usernameArg.replace('@', '');
    const targetUser = await this.userService.getUserByUsername(username);

    if (!targetUser || !targetUser.characters[0]) {
      await ctx.reply(
        `–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º @${username} –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`,
      );
      return;
    }

    if (!targetUser || !targetUser.characters.length) {
      await ctx.reply('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.');
      return;
    }

    await this.inventoryService.clearInventory(targetUser.characters[0].id);

    await ctx.reply(`üßπ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} –±—ã–ª –æ—á–∏—â–µ–Ω!`);
    await this.botService.sendMessageToTelegramId(
      `–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—ã–ª –æ—á–∏—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º... (ÔºõÔºøÔºõ)`,
      targetUser.telegramId!, // —É–±–µ–¥–∏—Å—å, —á—Ç–æ telegramId —Ç–æ—á–Ω–æ –Ω–µ null
    );
  }

  @UseGuards(AdminGuard)
  @Command('set_1_health')
  async set1health(@Ctx() ctx: Context) {
    const message = ctx.message;
    if (!message || !('text' in message)) return;

    const args = message.text.split(' ').slice(1); // ['/clear_inventory', '@username']
    const usernameArg = args[0];

    if (!usernameArg) {
      await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /clear_inventory @username');
      return;
    }

    const username = usernameArg.replace('@', '');
    const targetUser = await this.userService.getUserByUsername(username);

    if (!targetUser || !targetUser.characters[0]) {
      await ctx.reply(
        `–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º @${username} –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`,
      );
      return;
    }

    if (!targetUser || !targetUser.characters.length) {
      await ctx.reply('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.');
      return;
    }

    await this.characterService.set1health(targetUser.characters[0].id);

    await ctx.reply('–ó–¥–æ—Ä–æ–≤—å–µ —Å—Ç–∞–ª–æ 1');
  }

  @Command('create_weapon')
  async createWeapon(@Ctx() ctx: Context) {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('Please send a text message');
      return;
    }

    try {
      const args = parseArgs(ctx.message.text);
      const buffsInput = args.buffs as string | undefined;

      const buffs = buffsInput
        ? parseBuffs(buffsInput)?.map((b) => {
            if (!Object.values(BuffType).includes(b.type as BuffType)) {
              throw new Error(`Invalid buff type: ${b.type}`);
            }
            return {
              type: b.type as BuffType,
              value: b.value,
            };
          })
        : undefined;

      const weapon = await this.weaponService.createWeapon({
        name: args.name as string,
        attack: parseInt(args.attack as string),
        classReqName: args.classReq as string | undefined,
        rarity: args.rarity as string | undefined,
        type: args.type as string | undefined,
        buffs,
        forceNew: args.forceNew === 'true',
      });

      await ctx.reply(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ—Ä—É–∂–∏–µ: ${weapon.name}`);
    } catch (err) {
      console.error(err);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä—É–∂–∏—è: ' +
          (err instanceof Error ? err.message : String(err)),
      );
    }
  }

  @Command('create_armor')
  async createArmor(@Ctx() ctx: Context) {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('Please send a text message');
      return;
    }

    try {
      const args = parseArgs(ctx.message.text);
      const buffsInput = args.buffs as string | undefined;

      const buffs = buffsInput
        ? parseBuffs(buffsInput)?.map((b) => ({
            type: b.type as BuffType,
            value: b.value,
          }))
        : undefined;

      const armor = await this.armorService.createArmor({
        name: args.name as string,
        defense: parseInt(args.defense as string),
        classReqName: args.classReq as string | undefined,
        rarity: args.rarity as string | undefined,
        type: args.type as string | undefined,
        buffs,
        forceNew: args.forceNew === 'true',
      });

      await ctx.reply(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±—Ä–æ–Ω—è: ${armor.name}`);
    } catch (err) {
      console.error(err);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏: ' +
          (err instanceof Error ? err.message : String(err)),
      );
    }
  }

  @Command('create_food')
  async createFood(@Ctx() ctx: Context) {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('Please send a text message');
      return;
    }

    try {
      const args = parseArgs(ctx.message.text);
      const buffsInput = args.buffs as string | undefined;

      const buffs = buffsInput
        ? parseBuffs(buffsInput)?.map((b) => ({
            type: b.type as BuffType,
            value: b.value,
          }))
        : undefined;

      const food = await this.foodService.createFood({
        name: args.name as string,
        healValue: args.healValue
          ? parseInt(args.healValue as string)
          : undefined,
        hungryValue: args.hungryValue
          ? parseInt(args.hungryValue as string)
          : undefined,
        description: args.description as string | undefined,
        buffs,
        forceNew: args.forceNew === 'true',
      });

      await ctx.reply(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –µ–¥–∞: ${food.name}`);
    } catch (err) {
      console.error(err);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–¥—ã: ' +
          (err instanceof Error ? err.message : String(err)),
      );
    }
  }

  @Command('create_buff')
  async createBuff(@Ctx() ctx: Context) {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('Please send a text message');
      return;
    }

    try {
      const args = parseArgs(ctx.message.text);

      const buff = await this.buffService.createBuff(
        args.type as BuffType,
        parseInt(args.value as string),
        args.duration
          ? parseInt(args.duration as string)
          : undefined,
        args.description as string | undefined,
      );

      await ctx.reply(`‚úÖ –ë–∞—Ñ—Ñ —Å–æ–∑–¥–∞–Ω: ${buff.type} +${buff.value}`);
    } catch (err) {
      console.error(err);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞—Ñ—Ñ–∞: ' +
          (err instanceof Error ? err.message : String(err)),
      );
    }
  }

  @On('callback_query')
  async handleCallbackQuery(@Ctx() ctx: Context) {
    let data: string | undefined;
    if (
      ctx.callbackQuery &&
      'data' in ctx.callbackQuery &&
      typeof (ctx.callbackQuery as any).data === 'string'
    ) {
      data = (ctx.callbackQuery as { data: string }).data;
    }

    if (!data) {
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_query');
      return;
    }
    if (data.startsWith('catch_')) {
      // –ì–æ—Ç–æ–≤–æ: –õ–æ–≤–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
      await this.botHandlers.handleCatchAnimal(ctx, data);
      return;
    }
    if (data.startsWith('item:')) {
      await this.botHandlers.handleShowItem(ctx, data);
      return;
    }
    if (data.startsWith('use:')) {
      await this.botHandlers.handleUseItem(ctx, data);
      return;
    }
    if (data.startsWith('drop:')) {
      await this.botHandlers.handleDropItem(ctx, data);
      return;
    }
    if (data.startsWith('inventory:back')) {
      await this.botHandlers.handleBackToInventory(ctx);
      return;
    }
    if (data.startsWith('inventory:')) {
      await this.botHandlers.handleInventoryCheck(ctx);
      return;
    }
    if (data.startsWith('armor:')) {
      await this.botHandlers.handleArmorCheck(ctx);
      return;
    }

    if (data.startsWith('me:back')) {
      await this.botHandlers.handleBackToMe(ctx);
      return;
    }
  }
}
