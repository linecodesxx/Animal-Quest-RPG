import { UserService } from './../user/user.service';
import { Command, Ctx, On, Start, Update } from 'nestjs-telegraf';
import { BotService } from './bot.service';
import { Context } from 'telegraf';
import { PrismaService } from 'src/prisma/prisma.service';
import { AnimalSpawnService } from 'src/animal-spawn.service/animal-spawn.service';

@Update()
export class BotUpdate {
  constructor(
    private botService: BotService,
    private animalSpawnService: AnimalSpawnService,
    private userService: UserService
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context) {
    const user = await this.botService.findOrCreateUser(ctx);
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${user?.username || '–ü—É—à–∏—Å—Ç–∏–∫'}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RPG! üêæ\n` +
        '–ò—Å–ø–æ–ª—å–∑—É–π /find_pet —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –ª–æ–≤–ª–∏! \n' +
        '–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–ø–∞–≤–Ω–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö - /unsubscribe',
    );
  }

   @Command("me")
   async meInfo(@Ctx() ctx: Context){
    if(!ctx.from) return;
    const telegramId = String(ctx.from.id);
    const character = await this.userService.getUserCharacterByTelegramId(telegramId);

    if(!character){
        await ctx.reply('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–π–º–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ —á–µ—Ä–µ–∑ /find_pet!');
        return;
    }
    const msg = `üßç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂:
üë§ –ò–º—è: ${character.name}
üìà –£—Ä–æ–≤–µ–Ω—å: ${character.level}
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${character.health}
üéí –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${character.inventory.length}
üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(character.createdAt).toLocaleDateString()}
  `;

  await ctx.reply(msg);
   }


  @Command('find_pet')
  async findAnimals(@Ctx() ctx: Context) {
    const spawns = await this.animalSpawnService.getActiveSpawns();

    if (spawns.length === 0) {
      await ctx.reply('–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!');
      return;
    }

    for (const spawn of spawns) {
      await ctx.reply(
        `üêæ –ù–∞–π–¥–µ–Ω–æ: ${spawn.animal.type}\n` +
          `üïí –ò—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑: ${Math.round((spawn.despawnAt.getTime() - Date.now()) / 60000)} –º–∏–Ω\n` +
          `üéØ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–π–º–∞—Ç—å!`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `–ü–æ–π–º–∞—Ç—å ${spawn.animal.type}!`,
                  callback_data: `catch_${spawn.id}`,
                },
              ],
            ],
          },
        },
      );
    }
  }

  @On('callback_query')
  async handleCatch(@Ctx() ctx: Context) {
    const data = (ctx.callbackQuery as any).data;
    if (!data.startsWith('catch_')) return;

    const spawnId = parseInt(data.split('_')[1]);
    const user = await this.botService.findOrCreateUser(ctx);

    if (!user) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const result = await this.animalSpawnService.catchAnimal(user.id, spawnId);
    await ctx.editMessageText(result);
  }

  @Command('unsubscribe')
async unsubscribe(@Ctx() ctx: Context) {
  const telegramId = ctx.from?.id;
  if (!telegramId) return;

  await this.userService.updateByTelegramId(telegramId, {
    notifyOnAnimalSpawn: false,
  });

  await ctx.reply('–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö üêæ \n ' + 
    '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ - /subscribe'
  );
}

@Command('subscribe')
async subscribe(@Ctx() ctx: Context) {
  const telegramId = ctx.from?.id;
  if (!telegramId) return;

  await this.userService.updateByTelegramId(telegramId, {
    notifyOnAnimalSpawn: true,
  });

  await ctx.reply('–¢—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö üêæ \n' +
    '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è - /usubscribe'
  );
}

@Command("news")
async news(@Ctx() ctx: Context){
const message = ctx.message;
  if (!message || !('text' in message)) return;

  const fullText = message.text.trim();             // "/news –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
  const announcement = fullText.slice(6).trim();    // –æ—Ç—Ä–µ–∑–∞–µ–º "/news" (5 —Å–∏–º–≤–æ–ª–æ–≤ + –ø—Ä–æ–±–µ–ª)

  if (!announcement) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/news –°–µ–≥–æ–¥–Ω—è –≤ 18:00 –±—É–¥–µ—Ç –∏–≤–µ–Ω—Ç!');
    return;
  }

  // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–ª—å—à–µ
  await ctx.reply(`üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
  await this.botService.sendMessageToUsers(`üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n${announcement}`)
}

}
