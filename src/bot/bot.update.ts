import { UserService } from './../user/user.service';
import { Command, Ctx, On, Start, Update } from 'nestjs-telegraf';
import { BotService } from './bot.service';
import { Context } from 'telegraf';
import { AnimalSpawnService } from 'src/animal-spawn.service/animal-spawn.service';
import { InventoryService } from 'src/inventory/inventory.service';
import { AdminGuard } from 'src/common/guards/admin.guard';
import { NotImplementedException, UseGuards } from '@nestjs/common';
import { ItemType } from 'generated/prisma';
import { BotHandlers } from './handlers/bot.handlers';
import { CharacterService } from 'src/character/character.service';

/**
 * –°–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
 * –±–µ–∑ –∫–æ–º–º–∞–Ω–¥ —á–µ—Ä–µ–∑ / (—Å—Ç—Ä–æ–∫–∞ 271)
 * 
 * –°–¥–µ–ª–∞—Ç—å —Å–±–æ—Ä –∂–∏–≤–æ—Ç–Ω—ã—Ö —á—Ç–æ–±—ã –æ–Ω –ø—Ä–∏–Ω–æ—Å–∏–ª –æ–ø—ã—Ç
 * 
 * –°–¥–µ–ª–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (/bonus –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)
 * 
 * –°–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–∏–¥–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏ —Ä–µ–ø–ª–∞–µ –Ω–∞ –Ω–∏—Ö
 * 
 * –°–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–¥–∞–≤—Ç–∞—Ç—å –≤ –ø—Ä–∏—é—Ç
 * 
 * –î–æ–±–∞–≤–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫—É: —Ä—ã–Ω–æ–∫, –≤–∞–ª—é—Ç—É, –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞, –∫—É–ª–¥–∞—É–Ω—ã –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π
 * 
 * –°–¥–µ–ª–∞—Ç—å –∫–≤–µ—Å—Ç—ã
 */

@Update()
export class BotUpdate {
  constructor(
    private botService: BotService,
    private animalSpawnService: AnimalSpawnService,
    private userService: UserService,
    private inventoryService: InventoryService,
    private botHandlers: BotHandlers,
    private characterService: CharacterService,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context) {
    const user = await this.botService.findOrCreateUser(ctx);
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${user?.username || '–ü—É—à–∏—Å—Ç–∏–∫'}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RPG! üêæ\n` +
        '–ò—Å–ø–æ–ª—å–∑—É–π /find_pet —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –ª–æ–≤–ª–∏! \n' +
        '–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–ø–∞–≤–Ω–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö - /unsubscribe',
    );
  }

  @Command('me')
  async meInfo(@Ctx() ctx: Context) {
    if (!ctx.from) return;
    const telegramId = String(ctx.from.id);
    const character =
      await this.userService.getUserCharacterByTelegramId(telegramId);

    if (!character) {
      await ctx.reply(
        '–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–π–º–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ —á–µ—Ä–µ–∑ /find_pet!',
      );
      return;
    }
    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ quantity
    const totalItems = character.inventory.reduce(
      (sum, item) => sum + (item.quantity ?? 0),
      0,
    );
    const msg = `üßç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂:
üë§ –ò–º—è: ${character.name}
üìà –£—Ä–æ–≤–µ–Ω—å: ${character.level}
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${character.health}
üéí –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${totalItems}
üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(character.createdAt).toLocaleDateString()}
  `;

    await ctx.reply(msg);
  }

  @Command('find_pet')
  async findAnimals(@Ctx() ctx: Context) {
    const spawns = await this.animalSpawnService.getActiveSpawns();

    if (spawns.length === 0) {
      await ctx.reply('–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!');
      return;
    }

    for (const spawn of spawns) {
      await ctx.reply(
        `üêæ –ù–∞–π–¥–µ–Ω–æ: ${spawn.animal.type}\n` +
          `üïí –ò—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑: ${Math.round((spawn.despawnAt.getTime() - Date.now()) / 60000)} –º–∏–Ω\n` +
          `üéØ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–π–º–∞—Ç—å!`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `–ü–æ–π–º–∞—Ç—å ${spawn.animal.type}!`,
                  callback_data: `catch_${spawn.id}`,
                },
              ],
            ],
          },
        },
      );
    }
  }

  @Command('unsubscribe')
  async unsubscribe(@Ctx() ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    await this.userService.updateByTelegramId(telegramId, {
      notifyOnAnimalSpawn: false,
    });

    await ctx.reply(
      '–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö üêæ \n ' +
        '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ - /subscribe',
    );
  }

  @Command('subscribe')
  async subscribe(@Ctx() ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    await this.userService.updateByTelegramId(telegramId, {
      notifyOnAnimalSpawn: true,
    });

    await ctx.reply(
      '–¢—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö üêæ \n' +
        '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è - /usubscribe',
    );
  }

  @UseGuards(AdminGuard)
  @Command('news')
  async news(@Ctx() ctx: Context) {
    const message = ctx.message;
    if (!message || !('text' in message)) return;

    const fullText = message.text.trim(); // "/news –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
    const announcement = fullText.slice(6).trim(); // –æ—Ç—Ä–µ–∑–∞–µ–º "/news" (5 —Å–∏–º–≤–æ–ª–æ–≤ + –ø—Ä–æ–±–µ–ª)

    if (!announcement) {
      await ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/news –°–µ–≥–æ–¥–Ω—è –≤ 18:00 –±—É–¥–µ—Ç –∏–≤–µ–Ω—Ç!',
      );
      return;
    }

    // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–ª—å—à–µ
    await ctx.reply(`üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    await this.botService.sendMessageToUsers(`üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n${announcement}`);
  }

  @Command('inventory')
  async getInv(@Ctx() ctx: Context) {
    if (!ctx.from) return;
    const telegramId = String(ctx.from.id);
    const character =
      await this.userService.getUserCharacterByTelegramId(telegramId);

    if (!character) {
      await ctx.reply(
        '–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–π–º–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ —á–µ—Ä–µ–∑ /find_pet!',
      );
      return;
    }

    const items = await this.inventoryService.getInventory(character.id);

    const formatted = items
      .map((item, index) => `${index + 1}. ${item.name} √ó${item.quantity}`)
      .join('\n');

    const keyboard = items.map((item) => [
      {
        text: `${item.name} x${item.quantity}`,
        callback_data: `item:${item.id}`,
      },
    ]);
    if (formatted.length === 0) {
      await ctx.reply('üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç...');
    } else {
      await ctx.reply(`üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n${formatted}`, {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    }
  }

  @UseGuards(AdminGuard)
  @Command('give')
  async giveItem(@Ctx() ctx: Context) {
    const message = ctx.message;
    if (!message || !('text' in message)) return;

    const args = message.text.split(' ').slice(1); // ['@username', 'hamster']
    const [userTypeRaw, item, usernameArg] = args;
    const userType = userTypeRaw as ItemType;

    if (!item || !userType || !usernameArg) {
      await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /give item @username');
      return;
    }

    const username = usernameArg.replace('@', '');
    const targetUser = await this.userService.getUserByUsername(username);
    if (!targetUser) {
      await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return;
    }
    if (!targetUser.telegramId) {
      await ctx.reply(`‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} –Ω–µ –∑–∞–¥–∞–Ω Telegram ID.`);
      return;
    }
    const targetCharacter = await this.userService.getUserCharacterByTelegramId(
      targetUser.telegramId,
    );
    if (!targetCharacter) {
      await ctx.reply(`‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`);
      return;
    }

    await this.inventoryService.addNewItemToInventory(
      item,
      userType,
      1,
      targetCharacter.id,
    );

    await ctx.reply(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç "${item}" –≤—ã–¥–∞–Ω @${username}.`);
    await this.botService.sendMessageToTelegramId(
      targetUser.telegramId, // —Ç—É—Ç —É–∂–µ —Ç–æ—á–Ω–æ string, –∞ –Ω–µ null
      `üéÅ –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: ${item}!`,
    );
  }

  @UseGuards(AdminGuard)
  @Command('clear_inventory')
  async clearInventory(@Ctx() ctx: Context) {
    const message = ctx.message;
    if (!message || !('text' in message)) return;

    const args = message.text.split(' ').slice(1); // ['/clear_inventory', '@username']
    const usernameArg = args[0];

    if (!usernameArg) {
      await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /clear_inventory @username');
      return;
    }

    const username = usernameArg.replace('@', '');
    const targetUser = await this.userService.getUserByUsername(username);

    if (!targetUser || !targetUser.characters[0]) {
      await ctx.reply(
        `–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º @${username} –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`,
      );
      return;
    }

    if (!targetUser || !targetUser.characters.length) {
      await ctx.reply('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.');
      return;
    }

    await this.inventoryService.clearInventory(targetUser.characters[0].id);

    await ctx.reply(`üßπ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} –±—ã–ª –æ—á–∏—â–µ–Ω!`);
    await this.botService.sendMessageToTelegramId(
      `–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—ã–ª –æ—á–∏—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º... (ÔºõÔºøÔºõ)`,
      targetUser.telegramId!, // —É–±–µ–¥–∏—Å—å, —á—Ç–æ telegramId —Ç–æ—á–Ω–æ –Ω–µ null
    );
  }

  @Command('settings')
  async settings() {
    throw new NotImplementedException('NotImplemeted');
  }

  @On('callback_query')
  async handleCallbackQuery(@Ctx() ctx: Context) {
    let data: string | undefined;
    if (
      ctx.callbackQuery &&
      'data' in ctx.callbackQuery &&
      typeof (ctx.callbackQuery as any).data === 'string'
    ) {
      data = (ctx.callbackQuery as { data: string }).data;
    }

    if (!data) {
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_query');
      return;
    }
    if (data.startsWith('catch_')) {
      // –ì–æ—Ç–æ–≤–æ: –õ–æ–≤–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
      await this.botHandlers.handleCatchAnimal(ctx, data);
      return;
    }
    if (data.startsWith('item:')) {
      await this.botHandlers.handleShowItem(ctx, data);
      return;
    }
    if (data.startsWith('use:')) {
      await this.botHandlers.handleUseItem(ctx, data);
      return;
    }
    if (data.startsWith('drop:')) {
      await this.botHandlers.handleDropItem(ctx, data);
      return;
    }
    if (data.startsWith('inventory:back')) {
      await this.botHandlers.handleBackToInventory(ctx);
      return;
    }
  }
}
