import { Injectable } from '@nestjs/common';
import { InventoryItem } from 'generated/prisma';
import { AnimalSpawnService } from 'src/animal-spawn.service/animal-spawn.service';
import { InventoryService } from 'src/inventory/inventory.service';
import { UserService } from 'src/user/user.service';
import { Context } from 'telegraf';
import { BotService } from '../bot.service';

@Injectable()
export class BotHandlers {
  constructor(
    private readonly botService: BotService,
    private readonly animalSpawnService: AnimalSpawnService,
    private readonly userService: UserService,
    private readonly inventoryService: InventoryService,
  ) {}

  public async handleCatchAnimal(ctx: Context, data: string): Promise<void> {
    const spawnId = parseInt(data.split('_')[1]);
    const user = await this.botService.findOrCreateUser(ctx);

    if (!user) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const result = await this.animalSpawnService.catchAnimal(user.id, spawnId);
    await ctx.editMessageText(result);
  }

  public async handleShowItem(ctx: Context, data: string): Promise<void> {
    if (!ctx.from) return;

    const telegramId = String(ctx.from.id);
    const character =
      await this.userService.getUserCharacterByTelegramId(telegramId);

    if (!character) {
      await ctx.answerCbQuery('‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const itemId = parseInt(data.split(':')[1]);
    const item = await this.inventoryService.getItemById(itemId, character.id);

    if (!item) {
      await ctx.answerCbQuery('‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      await ctx.editMessageText(`üîç ${item.name} √ó${item.quantity}`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'ü•Ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', callback_data: `use:${item.id}` },
              { text: 'üóëÔ∏è –í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data: `drop:${item.id}` },
            ],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'inventory:back' }],
          ],
        },
      });
      await ctx.answerCbQuery();
    } catch (e) {
      console.error('[ERROR] editMessageText failed:', e);
      await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  public async handleUseItem(ctx: Context, data: string): Promise<void> {
    try {
      if (!ctx.from) return;

      const telegramId = String(ctx.from.id);
      const character =
        await this.userService.getUserCharacterByTelegramId(telegramId);
      // const itemId = parseInt(data.split(':')[1]);
      // await this.inventoryService.useItem(itemId); // —Ç–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è

      await ctx.answerCbQuery('üçΩÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ!');
      await this.handleBackToInventory(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ useItem:', error);
      await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.');
    }
  }

  public async handleDropItem(ctx: Context, data: string): Promise<void> {
    try {
      if (!ctx.from) return;

      const telegramId = String(ctx.from.id);
      const character =
        await this.userService.getUserCharacterByTelegramId(telegramId);

      const itemId = parseInt(data.split(':')[1]);
      if (!character) {
        await ctx.answerCbQuery('‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      await this.inventoryService.dropItem(itemId, character.id);

      await ctx.answerCbQuery('üóëÔ∏è –í—ã–±—Ä–æ—à–µ–Ω–æ!');
      await this.handleBackToInventory(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ dropItem:', error);
      await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏.');
    }
  }

  public async handleBackToInventory(ctx: Context): Promise<void> {
    const telegramId = String(ctx.from?.id);
    const character =
      await this.userService.getUserCharacterByTelegramId(telegramId);
    if (!character) {
      await ctx.editMessageText('‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    const items: InventoryItem[] = await this.inventoryService.getInventory(
      character.id,
    );
    if (!items.length) {
      await ctx.editMessageText('üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.');
      return;
    }
    const keyboard = items.map((item: InventoryItem) => [
      {
        text: `${item.name} √ó${item.quantity}`,
        callback_data: `item:${item.id}`,
      },
    ]);
    await ctx.editMessageText('üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:', {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    });
    await ctx.answerCbQuery();
  }
}
